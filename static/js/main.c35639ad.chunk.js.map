{"version":3,"sources":["CountryCard/edit.svg","CountryCard/CountryCard.js","EditModal/EditModal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","countryCard","props","className","src","flag","alt","name","onClick","toggleModal","alpha3Code","capital","region","population","editIcon","editModal","onSubmit","event","preventDefault","target","countryName","value","capitalName","regionName","populationNum","change","onReset","cancel","type","required","placeholder","defaultValue","App","changeCountryPropertiesHandler","allCountries","state","countries","slice","countryIndex","findIndex","c","country","splice","setState","showModal","propsForModal","toggleModalHandler","error","isLoaded","fetch","then","res","json","result","main","this","map","CountryCard","key","id","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c35639ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/edit.2927f8de.svg\";","import React from 'react';\nimport editIcon from './edit.svg';\n\nconst countryCard = (props) => {\n  return (\n    <div className='country-card'>\n      <img className='flag' src={props.flag} alt='Country Flag' />\n      <div className='description'>\n        <div className='headline'>\n          <h2>{props.name}</h2>\n          <img className='edit' \n            onClick={() => props.toggleModal(props.alpha3Code, props.name, props.capital, props.region, props.population)} \n            src={editIcon}            \n            alt='Редактировать'/>\n        </div>\n        <div className='capital lines'>\n          <span>Столица</span>\n          <span>{props.capital}</span>\n        </div>\n        <div className='region lines'>\n          <span>Регион</span>\n          <span>{props.region}</span>\n        </div>\n        <div className='population lines'>\n          <span>Население</span>\n          <span>{props.population}</span>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default countryCard;\n","import React from 'react';\nimport './EditModal.css';\n\nconst editModal = (props) => {\n  \n  const onSubmit = (event) => {\n    event.preventDefault();\n    const name = event.target.countryName.value;\n    const capital = event.target.capitalName.value;\n    const region = event.target.regionName.value;\n    const population = event.target.populationNum.value;\n    props.change(props.alpha3Code, name, capital, region, population);\n  }\n  \n  const onReset = (event) => {\n    event.preventDefault();\n    props.cancel(null, null, null, null, null);\n  }\n\n  return(\n  <div className='modal-container'>\n    <div className='edit-modal-window'>\n      <div className='edit-modal-header'>Изменение информации о стране</div>\n      <form onSubmit={onSubmit} onReset={onReset}>\n        <input type='text' name='countryName' required placeholder='Наименование страны' defaultValue={props.name} />\n        <input type='text' name='capitalName'placeholder='Столица' defaultValue={props.capital} />\n        <input type='text' name='regionName' placeholder='Регион'defaultValue={props.region} />\n        <input type='text' name='populationNum'placeholder='Население' defaultValue={props.population} />\n        <div className='buttons'>\n        <button type='submit'>Сохранить</button>\n        <button type='reset'>Отмена</button>\n        </div>\n      </form>\n\n    </div>\n  </div>\n  );\n}\n\nexport default editModal;\n","import React, { Component } from 'react';\n\nimport CountryCard from './CountryCard/CountryCard';\nimport EditModal from './EditModal/EditModal';\nimport './App.css';\n\n\nconst url = 'https://restcountries.eu/rest/v2/all?fields=flag;name;capital;region;population;alpha3Code';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      countries: [],\n      showModal: false,\n      propsForModal: {\n        alpha3Code: null,\n        name: null,\n        capital: null,\n        region: null,\n        population: null,\n      }\n    };\n  };  \n\n  componentDidMount() {\n    fetch(url)\n      .then(res => res.json())\n      .then( (result) => this.setState({isLoaded: true, countries: result}),\n             (error) => this.setState({isLoaded: true, error: error})\n             )\n  };\n            \n  changeCountryPropertiesHandler = (alpha3Code, name, capital, region, population) => {\n    const allCountries = this.state.countries.slice();\n    const countryIndex = allCountries.findIndex(c => c.alpha3Code === alpha3Code);\n    const country = allCountries[countryIndex];\n    country.name = name;\n    country.capital = capital;\n    country.region = region;\n    country.population = population;\n    allCountries.splice(countryIndex, 1, country);\n    this.setState({\n      countries: allCountries, \n      showModal: false,\n      propsForModal: {\n        alpha3Code: null,\n        name: null,\n        capital: null,\n        region: null,\n        population: null,\n      }\n    });\n  }\n  \n  toggleModalHandler = (alpha3Code, name, capital, region, population) => {\n    this.setState({\n      showModal: !this.state.showModal, \n      propsForModal: {\n        alpha3Code: alpha3Code,\n        name: name,\n        capital: capital,\n        region: region,\n        population: population,\n      }  \n    });\n  }\n\n  render() {    \n    let main = '';\n    if (this.state.isLoaded) {\n      main = this.state.countries.map(country => \n        <CountryCard \n          flag = {country.flag} \n          name = {country.name}\n          capital = {country.capital}\n          region = {country.region}\n          population = {country.population}\n          key = {country.alpha3Code}\n          alpha3Code = {country.alpha3Code}          \n          toggleModal = {this.toggleModalHandler}\n        />\n      );\n    } else {\n      main = (<div className='loader-container'>\n                <div className=\"loader\"></div>\n                <div id='loading-text'>Data is loading...</div>\n              </div>); \n    }\n    \n    return (\n      <div className='Content'>\n        <header>\n          <h1>Страны мира</h1>\n          <a className='api-link' href='https://restcountries.eu'>https://restcountries.eu</a>\n        </header>\n        <main>\n          {this.state.showModal \n          ? <EditModal \n              alpha3Code = {this.state.propsForModal.alpha3Code}\n              name = {this.state.propsForModal.name} \n              capital = {this.state.propsForModal.capital}\n              region = {this.state.propsForModal.region}\n              population = {this.state.propsForModal.population}\n              change = {this.changeCountryPropertiesHandler}\n              cancel = {this.toggleModalHandler}\n            /> \n          : main}\n        </main>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}